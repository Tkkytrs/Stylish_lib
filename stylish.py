def randomcolor(text):
    colors = ['\033[91m', '\033[93m', '\033[92m', '\033[94m', '\033[95m', '\033[96m']
    reset_color = '\033[0m'
    
    output = ""
    for i, char in enumerate(text):
        color = colors[i % len(colors)]
        output += f"{color}{char}"
    
    return(output + reset_color)
def color(text, color):
    colors = {
        'black': '\033[30m',
        'red': '\033[31m',
        'green': '\033[32m',
        'yellow': '\033[33m',
        'blue': '\033[34m',
        'magenta': '\033[35m',
        'cyan': '\033[36m',
        'white': '\033[37m',
        'reset': '\033[0m'
    }

    if color in colors:
        color_code = colors[color]
        reset_code = colors['reset']
        return f"{color_code}{text}{reset_code}"
    else:
        print(f"Invalid color: {color}")

def name(text):
    """
    Generate ASCII art text.
    
    Args:
        text (str): The input text to be converted to ASCII art.
    
    Returns:
        str: The ASCII art representation of the input text.
    """
    basic_font = {
        "A": ["  ___  ", " / _ \\ ", "/ |_| \\", "\\_____/"],
        "B": [" ____  ", "| __ ) ", "|  _ \\ ", "|____/ "],
        "C": ["  ____ ", " / ___|", "| |     ", "| |___  ", " \\____|"],
        "D": [" ____  ", "|  _ \\ ", "| | | |", "| |_| |", "|____/ "],
        "E": [" _____ ", "| ____|", "|  _|  ", "| |___ ", "|_____|"],
        "F": [" _____ ", "|  ___|", "| |_   ", "|  _|  ", "|_|    "],
        "G": ["  ____ ", " / ___|", "| |  _ ", "| |_| |", " \\____|"],
        "H": [" _   _ ", "| | | |", "| |_| |", "|  _  |", "|_| |_|"],
        "I": [" _____ ", " |_   _|", "   | |  ", "   | |  ", "   |_|  "],
        "J": ["     _ ", "    | |", " _  | |", "| |_| |", " \\___/ "],
        "K": [" _  __", "| |/ /", "| ' / ", "| . \\ ", "|_|\\_\\"],
        "L": [" _     ", "| |    ", "| |    ", "| |___ ", "|_____|"],
        "M": [" __  __ ", "|  \\/  |", "| |\\/| |", "| |  | |", "|_|  |_|"],
        "N": [" _   _ ", "| \\ | |", "|  \\| |", "| |\\  |", "|_| \\_|"],
        "O": ["  ___  ", " / _ \\ ", "| | | |", "| |_| |", " \\___/ "],
        "P": [" ____  ", "|  _ \\ ", "| |_) |", "|  __/ ", "|_|    "],
        "Q": ["  ___  ", " / _ \\ ", "| | | |", "| |_| |", " \\__\\_\\ "],
        "R": [" ____  ", "|  _ \\ ", "| |_) |", "|  _ < ", "|_| \\_\\"],
        "S": [" ____ ", "/ ___|", "\\___ \\", " ___) |", "|____/ "],
        "T": [" _____ ", "|_   _|", "  | |  ", "  | |  ", "  |_|  "],
        "U": [" _   _ ", "| | | |", "| | | |", "| |_| |", " \\___/ "],
        "V": ["__     __", "\\ \\   / /", " \\ \\ / / ", "  \\ V /  ", "   \\_/   "],
        "W": ["__        __", "\\ \\      / /", " \\ \\ /\\ / / ", "  \\ V  V /  ", "   \\_/\\_/   "],
        "X": ["__  __", "\\ \\/ /", " \\  / ", " /  \\ ", "/_/\\_\\"],
        "Y": ["__   __", "\\ \\ / /", " \\ V / ", "  | |  ", "  |_|  "],
        "Z": [" _____", "|__  /", "  / / ", " / /_ ", "/____|\\"],
        "a": ["       ", "  __ _ ", " / _ \\ ", "| |_| |", " \\___/ "],
        "b": ["       ", "| __ ) ", "|  _ \\ ", "| |_) |", "|____/ "],
        "c": ["      ", "  ___ ", " / __|", "| (__ ", " \\___|"],
        "d": ["     _ ", "  __| |", " / _` |", "| (_| |", " \\__,_|"],
        "e": ["      ", "  ___ ", " / _ \\ ", "|  __/", " \\___|"],
        "f": ["  __ ", " / _|", "| |_ ", "|  _|", "|_|  "],
        "g": ["       ", "  __ _ ", " / _` |", "| (_| |", " \\__, |", " |___/ "],
        "h": ["       ", "| __ ) ", "|  _ \\ ", "| |_) |", "|____/ "],
        "i": [" _ ", "(_)", "| |", "| |", "|_|"],
        "j": ["   _ ", "  (_)", "  | |", "  | |", "  | |", " _/ |", "|__/ "],
        "k": ["       ", "|  _ \\ ", "| | | |", "| |_| |", "|____/ "],
        "l": [" _ ", "| |", "| |", "| |", "|_|"],
        "m": ["          ", " _ __ ___ ", "| '_ ` _ \\", "| | | | | |", "|_| |_| |_|"],
        "n": ["       ", " _ __ ", "| '_ \\", "| | | |", "|_| |_|"],
        "o": ["      ", "  ___ ", " / _ \\ ", "| (_) |", " \\___/ "],
        "p": ["       ", "| __ ) ", "|  _ \\ ", "| |_) |", "| .__/ ", "|_|    "],
        "q": ["       ", "  __ _ ", " / _` |", "| (_| |", " \\__, |", "    |_|"],
        "r": ["      ", " _ __ ", "| '__|", "| |   ", "|_|   "],
        "s": ["     ", " ___ ", "/ __|", "\\__ \\", "|___/"],
        "t": ["  _   ", " | |_ ", " | __|", " | |_ ", "  \\__|"],
        "u": ["       ", " _   _ ", "| | | |", "| |_| |", " \\__,_|"],
        "v": ["      ", "__   __", "\\ \\ / /", " \\ V / ", "  \\_/  "],
        "w": ["          ", "__      __", "\\ \\ /\\ / /", " \\ V  V / ", "  \\_/\\_/  "],
        "x": ["       ", "__  __", " \\ \\/ /", "  >  < ", " /_/\\_\\"],
        "y": ["       ", " _   _ ", "| | | |", "| |_| |", " \\__, |", " |___/ "],
        "z": ["      ", " ____", "|__  /", "  / / ", " /___|"]
    }
    
    lines = [""] * 5  # Number of lines per character
    
    for char in text:
        char_lines = basic_font.get(char)
        if not char_lines:
            raise ValueError(f"Unsupported character: {char}")
            
        for i, line in enumerate(char_lines):
            lines[i] += line + " "
    
    return "\n".join(lines)

# Example usage:
